import 'dart:async';import 'dart:io';import 'package:path_provider/path_provider.dart';import 'package:sqflite/sqflite.dart';import 'package:path/path.dart';import 'package:shahwan/Model/user.dart';class DatabaseHelper {  final String tableProduct = "tableProduct";  final String productID = "Id";  final String productName = "name";  final String sku = "sku";  final String options = "options";  final String price = "price";  final String quantity = "quantity";  final String spicalpriceFrom = "spicalpriceFrom";  final String spicalpriceTo = "spicalpriceTo";  final String productImage = "image";  final String optionTyprId = "optionTyprId";  final String sortOrder = "sortOrder";  final String userTable = "userTable";  final String userFirstName = "userFirstName";  final String userLastName = "userLastName";  final String userEmail = "userEmail";  final String userPhone = "userPhone";  final String userGender = "userGender";  final String userAccessToken = "userAccessToken";  // optionTyprId:optionList[1]['option_type_id'] , sortOrder:optionList[1]['sort_order']  //Singlton  static final DatabaseHelper _instance = new DatabaseHelper.internal();  DatabaseHelper.internal();  factory DatabaseHelper() => _instance;  //Database reference  static Database? _db;  Future<Database?> get database async {    if (_db == null) {      _db = await initDb();    }    return _db;  }  // Future<Database> get db async {  //   if (_db != null) {  //     return _db;  //   }  //   try{  //     _db = await initDb();  //     print("_db init");  //     return _db;  //   }  //   catch(err){  //     print(err);  //     return null ;  //   }  //  // }  initDb() async {    Directory documentDirectory = await getApplicationDocumentsDirectory();    print(documentDirectory);    String path = join(documentDirectory.path, "shahwan.db");    var ourDb = await openDatabase(path, version: 1, onCreate: _onCreate);    print("ourDb db");    print(ourDb);    return ourDb;  }  void _onCreate(Database db, int version) async {    await db.execute(        "CREATE TABLE $userTable( $userFirstName TEXT, $userLastName TEXT, $userEmail TEXT , $userPhone TEXT, $userGender TEXT , $userAccessToken INTEGER)");  }  // //READ  // Future<int> saveProduct(Products products) async {  //   //will call get db from above  //   var dbClient = await db;  //   //result of insert is number  //   int result = await dbClient.insert(tableProduct, products.toMap());  //   return result;  // }  Future<int> saveUser(User user) async {    //will call get db from above    var dbClient = await _db;    //result of insert is number    int result = await dbClient!.insert(userTable, user.toMap());    return result;  }  //  // //GET USERS  // Future<List> getAllProducts() async {  //   var dbClient = await db;  //   var result = await dbClient.rawQuery("SELECT * FROM $tableProduct");  //   return result.toList();  // }  Future<List> getUser() async {    try{      var dbClient = await _db;      var result = await dbClient!.rawQuery("SELECT * FROM $userTable");      print("RESELT"+result.toString());      return result.toList();      // return [];    }catch(err){      print(err);      return [];    }  }  Future<int> deleteProduct(int productID) async {    var dbClient = await _db;    return await dbClient!        .delete(tableProduct, where: "$productID = ?", whereArgs: [productID]);  }  // Future<int> updateUser(User user) async {  //   var dbClient = await db;  //   return await dbClient.update(tableProduct, user.toMap(),  //       where: "$productID = ? ", whereArgs: [user.id]);  // }  Future close() async {    var dbClient = await _db;    return dbClient!.close();  }//End of Video 3}